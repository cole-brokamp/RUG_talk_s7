---
title: "Introduction to S7"
subtitle: "A new Object Oriented System for R"
author: "Cole Brokamp"
date: "2024-01-10"
execute:
  echo: true
format: 
  revealjs:
    theme: cole.scss
    standalone: true
    embed-resources: true
    link-external-icon: false
    link-external-newwindow: true
---

## üëã &nbsp; Welcome

&nbsp;

[Join](https://outlook.office365.com/owa/r@cchmc.onmicrosoft.com/groupsubscription.ashx?action=join) the RUG Outlook group for updates and events: &nbsp;<https://t.ly/vRw7y>

&nbsp;


![](figs/join_rug.png)

# Introduction to S7

A new Object Oriented System for R

## Why do we need OOP in R?

Most functional programming approaches use base classes and add code within functions to validate inputs based on class

1. Handling more types of data causes the function to get bigger and bigger
1. Only the author of the function can add new types

## Intro to Object Oriented Programming

### Polymorphism

- consider a function's interface separately from its implementation
- use the same function form for different types of input

&nbsp;

```{r}
summary(ggplot2::diamonds$carat)
summary(ggplot2::diamonds$cut)
```

## Intro to Object Oriented Programming

**Generics** define behavior or what an object does  
**Classes** define data or what an object is

- Classes organized in a hierarchy so "fall back" parent method can be tried (**inheritance**)
- For example, ordered factor in R inherits from a regular factor
- Finding the correct method given an class is called **method dispatch**

## OOP Paradigms

### Encapsulated OOP
- methods belong to objects or classes
- method calls look like: `object.method(arg1, arg2)`
- encapsulates both data (fields) and behavior (methods)
- found in most popular languages

### Functional OOP
- methods belong to generic functions
- method calls look like ordinary function calls: `generic(object, arg2, arg3)`

## Existing OOP in R

**S3**: first, informal implementation that relies on common conventions

**S4**: rigorous rewrite of S3 and provides greater encapsulation

**RC**: implements encapsulated OOP as a special type of S4 objects that are mutable

**R6**, **R.oo**, **proto** are other popular systems implemented in CRAN packages

## Exploring OOP in R

```{r}
library(sloop)
```

```{r}
otype(1:10)
otype(mtcars)
mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)
otype(mle_obj)
```

## S3 in R

An S3 object is a base type with at least a `class` attribute:

```{r}
f <- factor(c("a", "b", "c"))
typeof(f)
attributes(f)
inherits(f, "factor")
```

```{r}
s3_dispatch(print(f))
```

## S7 is the sucessor to S3 and S4 (and RC)

![https://xkcd.com/927](https://imgs.xkcd.com/comics/standards_2x.png)

- Community adoption, planning, development (R-core, Bioconductor, ROpenSci, Posit, others)
- Design, specification, meeting minutes available at <https://rconsortium.github.io/S7/articles/index.html>

##

### Captures the best parts of S4

- Formal definition of classes
- @ helper (that errors) to extract properties
- Multi-dispatch where needed
- Validator

### While remaining 100% backward compatible with S3

- Goal to merge into base R
- Embrace data access
- Digging a "pit of success"

# Using S7 in R

```{r}
library(S7)
```

## Using S7 in R

Create a constructor function with the name of the class, property names and types:

```{r}
range <-
  new_class(
    "range",
    properties = list(
      start = class_numeric,
      end = class_numeric
    )
  )

```

##

```{r}
x <- range(start = 1, end = 10)
x
```

&nbsp;

```{r}
x@start
x@end <- 20
x
```

&nbsp;

```{r}
#| error: true
x@end <- "x"
```

## Use validators to prevent "wrong" objects from being created

```{r}
range(start = 10, end = 1)
```

&nbsp;

```{r}
range <-
  new_class("range",
    properties = list(
      start = class_numeric,
      end = class_numeric
    ),
    validator = function(self) {
      if (length(self@start) != 1) {
        "@start must be length 1"
      } else if (length(self@end) != 1) {
        "@end must be length 1"
      } else if (self@end < self@start) {
        "@end must be greater than or equal to @start"
      }
    })
```

## Create new generic methods for the new class

```{r}
inside <- new_generic("inside", "x")

method(inside, range) <- function(x, y) {
  y >= x@start & y <= x@end
}

inside(x, c(0, 5, 10))
```

# Address example

## Address Character Strings

Addresses often stored as combined strings or can be concatenated from other address components (e.g., "address line 1" and "address line 2")

```{r}
my_address <- "3333 Burnet ave cincinnati OH 45219"
```

. . .

Cleaning and tagging the address extracts components using open natural language processing models:

```{r}
parcel::tag_address(my_address)

parcel::tag_address("3333 Burnet Ave cincinnati oh 45219-2843")
```

## Apply to all address in a tibble

```{r}
d <-
  tibble::tibble(id = 1:3,
                 address = rep(my_address, times = 3)) |>
  dplyr::mutate(parsed_address = purrr::map(address, parcel::tag_address))

```

. . .

```{r}
d

str(d$parsed_address[[1]])
```

## Challenge

With a tibble full of addresses, how can we maintain tidy data with a character string returning a tibble with five columns?

```{r}
tidyr::unnest(d, cols = parsed_address)
```

A common challenge faced by {sf}, {dplyr} or any other package that utilizes classes of vectors designed to be used in a data.frame.

. . .

**Approach**

Use S7 package to create a new class for addresses that will interoperate with existing R objects and packages.

Create an address class that will have properties for each address component, but use the `print` generic to neatly print the full string instead of each component as a list.

## Define a New Class with S7

```{r}
library(S7)

addr <- new_class(
  "addr",
  parent = class_character,
  properties = list(
    street_number = class_numeric,
    street_name = class_character,
    city = class_character,
    state = class_character,
    zip_code = class_character
  ),
  validator = function(self) {
    if (any(nchar(self@zip_code) != 5)) {
      "@zip_code must contain five characters"
    }
  }
)
```

## Creating a new `addr` object

```{r}
addr("3333 Burnet Ave Cincinnati OH 45219",
     street_number = 3333,
     street_name = "Burnet Ave",
     city = "Cincinnati",
     state = "OH",
     zip_code = "45219")
```

## Helpful validation

This comes with validation for classes of arguments:

```{r}
#| error: true
addr("3333 Burnet Ave Cincinnati OH 45219",
     street_number = "3333",
     street_name = "Burnet Ave",
     city = "Cincinnati",
     state = "OH",
     zip_code = "45219")
```

and for anything defined in the validator:

```{r}
#| error: true
addr("3333 Burnet Ave Cincinnati OH 45219",
     street_number = 3333,
     street_name = "Burnet Ave",
     city = "Cincinnati",
     state = "OH",
     zip_code = "45219-2234")
```

## New objects are tedious; more common to coerce objects

```{r}
my_address
```

&nbsp;

```{r}
as_addr <- function(x) {
  x_tags <-
    parcel::tag_address(x) |>
    as.list()
  x_tags$street_number <- as.numeric(x_tags$street_number)
  return(do.call(addr, c(x, x_tags)))
}
```

&nbsp;

```{r}
as_addr(my_address)
```

## Create a custom print method

```{r}
S7::method(print, addr) <- function(x, ...) {
  glue::glue_data(props(x),
                  "{street_number} ",
                  "{stringr::str_to_title(street_name)} ",
                  "{stringr::str_to_title(city)}, {toupper(state)} ",
                  "{zip_code}") |>
    cat()
  cat("\n")
}

as_addr(my_address)
```

&nbsp;

```{r}
str(as_addr(my_address))
```

## Print works inside tibbles

```{r}
my_addresses <-
  c("224 Woolper Ave Cincinnati OH 45220",
    "3333 Burnet Ave Cincinnati OH 45219")

d <-
  tibble::tibble(
  id = 1:2,
  address = purrr::map(my_addresses, as_addr)
  )

d
```

&nbsp;

```{r}
d$address
```

## Extract properties to get at individual address components

```{r}
d$zip_code <- purrr::map_chr(d$address, prop, "zip_code")

d
```

## Related work and more resources

- <https://rconsortium.github.io/S7/index.html>
- <https://adv-r.hadley.nz/oo.html>
- [vctrs](https://vctrs.r-lib.org/) package for a more stable way to create new S3 vectors
- [Intro to S7 talk at posit::conf(2022)](https://www.youtube.com/watch?v=P3FxCvSueag) 
- Applied example in fr package: <https://cran.r-project.org/package=fr>

# Thank You

üë®‚ÄçüíªÔ∏è [github.com/cole-brokamp](https://github.com/cole-brokamp)

ùïè [@cole_brokamp](https://twitter.com/cole_brokamp)

üìß [cole.brokamp@cchmc.org](mailto:cole.brokamp@cchmc.org)

